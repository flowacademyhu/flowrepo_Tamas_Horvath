{
	"info": {
		"_postman_id": "310268e3-0568-4967-b958-9114154e9656",
		"name": "All in one",
		"description": "A három endpoint összefüggő tesztje.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19882352"
	},
	"item": [
		{
			"name": "Endpoint(4)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an object\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"Data is an array\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.data).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Date is added\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  console.log(responseJson.data[0]);\r",
							"  const Date = \"2022-03-10T23:30Z\"\r",
							"  pm.expect(responseJson.data[0].from).to.eql(Date);\r",
							"  //pm.expect(responseJson.data[0]).to.include(\"from\");\r",
							"});\r",
							"\r",
							"pm.test(\"Period is added\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const period = \"2022-03-11T00:00Z\";\r",
							"    pm.expect(responseJson.data[0].to).to.eql(period);\r",
							"});\r",
							"\r",
							"pm.test(\"Access-Control-Allow-Origin\", () => {\r",
							"    const header = pm.response.headers.get(\"Access-Control-Allow-Origin\");\r",
							"    console.log(header);\r",
							"    pm.expect(header).to.eql(\"*\");\r",
							"    pm.expect(header).to.be.string;\r",
							"});\r",
							"\r",
							"pm.test(\"Header Content-Type to be app/json\", () => {\r",
							"    const header = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(header).to.eql(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Header Conection to be alive\", () => {\r",
							"    const header = pm.response.headers.get(\"Connection\");\r",
							"    pm.expect(header).to.eql(\"keep-alive\");\r",
							"});\r",
							"\r",
							"pm.test(\"Header Content-Length to be 185\", () => {\r",
							"    const header = pm.response.headers.get(\"Content-Length\");\r",
							"    pm.expect(header).to.eql(\"185\");\r",
							"});\r",
							"\r",
							"pm.test(\"Header Date is exist\", () => {\r",
							"    const header = pm.response.headers.get(\"Date\");\r",
							"    pm.expect(header).to.be.ok;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}intensity/date/2022-03-10/48",
					"host": [
						"{{BaseURL}}intensity"
					],
					"path": [
						"date",
						"2022-03-10",
						"48"
					]
				}
			},
			"response": []
		},
		{
			"name": "Endpoint(8)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an object\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"Data is an array\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.data).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Data has 96 array\", () => {\r",
							"const responseJson = pm.response.json();\r",
							"console.log(responseJson.data);\r",
							"pm.expect(responseJson.data).to.have.lengthOf(96); \r",
							"});\r",
							"\r",
							"pm.test(\"Date is exists\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  console.log(responseJson.data[0]);\r",
							"  const Datefrom = \"2022-03-10T12:30Z\"\r",
							"  const Dateto = \"2022-03-10T13:00Z\"\r",
							"  pm.expect(responseJson.data[0].from).to.eql(Datefrom);\r",
							"  pm.expect(responseJson.data[0].to).to.eql(Dateto);\r",
							"  \r",
							"}); \r",
							"\r",
							"pm.test(\"Data is contained\", () => {\r",
							"    const responseJson = pm.response.json(); \r",
							"    const expectedObject = {\r",
							"    \"intensity\": {\r",
							"                \"forecast\": 114,\r",
							"                \"actual\": 118,\r",
							"                \"index\": \"low\"\r",
							"            }\r",
							"  };\r",
							"  pm.expect(responseJson.data[0]).to.deep.include(expectedObject);\r",
							"});\r",
							"\r",
							"pm.test(\"Access-Control-Allow-Origin\", () => {\r",
							"    const header = pm.response.headers.get(\"Access-Control-Allow-Origin\");\r",
							"    console.log(header);\r",
							"    pm.expect(header).to.eql(\"*\");\r",
							"    pm.expect(header).to.be.string;\r",
							"});\r",
							"\r",
							"pm.test(\"Header Content-Type to be app/json\", () => {\r",
							"    const header = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(header).to.eql(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Header Conection to be alive\", () => {\r",
							"    const header = pm.response.headers.get(\"Connection\");\r",
							"    pm.expect(header).to.eql(\"keep-alive\");\r",
							"});\r",
							"\r",
							"pm.test(\"Header Content-Length to be 10584\", () => {\r",
							"    const header = pm.response.headers.get(\"Content-Length\");\r",
							"    pm.expect(header).to.eql(\"10584\");\r",
							"});\r",
							"\r",
							"pm.test(\"Header Date is exist\", () => {\r",
							"    const header = pm.response.headers.get(\"Date\");\r",
							"    pm.expect(header).to.be.ok;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}intensity/2022-03-10T12:35Z/fw48h",
					"host": [
						"{{BaseURL}}intensity"
					],
					"path": [
						"2022-03-10T12:35Z",
						"fw48h"
					]
				}
			},
			"response": []
		},
		{
			"name": "Endpoint(9)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an object\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"Data is an array\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.data).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Data has 48 array\", () => {\r",
							"const responseJson = pm.response.json();\r",
							"console.log(responseJson.data);\r",
							"pm.expect(responseJson.data).to.have.lengthOf(48); \r",
							"});\r",
							"\r",
							"pm.test(\"Date is exists\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  console.log(responseJson.data[0]);\r",
							"  const Datefrom = \"2022-03-09T12:30Z\"\r",
							"  const Dateto = \"2022-03-09T13:00Z\"\r",
							"  pm.expect(responseJson.data[0].from).to.eql(Datefrom);\r",
							"  pm.expect(responseJson.data[0].to).to.eql(Dateto);\r",
							"  \r",
							"}); \r",
							"\r",
							"pm.test(\"Data is contained\", () => {\r",
							"    const responseJson = pm.response.json(); \r",
							"    const expectedObject = {\r",
							"    \"intensity\": {\r",
							"                \"forecast\": 125,\r",
							"                \"actual\": 125,\r",
							"                \"index\": \"low\"\r",
							"            }\r",
							"  };\r",
							"  pm.expect(responseJson.data[0]).to.deep.include(expectedObject);\r",
							"});\r",
							"\r",
							"pm.test(\"Access-Control-Allow-Origin\", () => {\r",
							"    const header = pm.response.headers.get(\"Access-Control-Allow-Origin\");\r",
							"    console.log(header);\r",
							"    pm.expect(header).to.eql(\"*\");\r",
							"    pm.expect(header).to.be.string;\r",
							"});\r",
							"\r",
							"pm.test(\"Header Content-Type to be app/json\", () => {\r",
							"    const header = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(header).to.eql(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Header Conection to be alive\", () => {\r",
							"    const header = pm.response.headers.get(\"Connection\");\r",
							"    pm.expect(header).to.eql(\"keep-alive\");\r",
							"});\r",
							"\r",
							"pm.test(\"Header Content-Length to be 5376\", () => {\r",
							"    const header = pm.response.headers.get(\"Content-Length\");\r",
							"    pm.expect(header).to.eql(\"5376\");\r",
							"});\r",
							"\r",
							"pm.test(\"Header Date is exist\", () => {\r",
							"    const header = pm.response.headers.get(\"Date\");\r",
							"    pm.expect(header).to.be.ok;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}intensity/2022-03-10T12:35Z/pt24h",
					"host": [
						"{{BaseURL}}intensity"
					],
					"path": [
						"2022-03-10T12:35Z",
						"pt24h"
					]
				}
			},
			"response": []
		}
	]
}